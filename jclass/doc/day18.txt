# day18

정규식 검사
==> 주어진 문자열이 특정한 규칙에 맞도록 만들어져 있는지를 확인하는 기능
	예 ]
		주민번호가 6자리-7자리 숫자로 구성되어 있는가?
		아이디가 순수하게 숫자와 문자로만 구성되어 있는가?
		아이디가 최소 몇글자 이상으로 구성되어 있는가?
		
	사용하는 클래스
		java.util.regex.Pattern
		==> 정규식 검사에 사용할 정규식 문법을 지정할 클래스
		
		java.util.regex.Matcher
		==> 정규식 검사를 실제로 실행할 클래스
		
	참고 ]
		정규식 문법
			참고 ]
				[] - 올수있는 문자
					 내부에 a-z 소문자 를 의미
					 A-Z 대문자 하나를 의미
					 0-9 숫자 하나
					 예 ]
					 	[a*^$#]	- a, *, ^, $, # 중 하나가 와야한다는 의미
					 	
				{}	- 문자의 갯수를 지정하는 부분
			
			1. c[a-z]*
				==> 문자를 그냥 기술하면 반드시 그 위치에 해당 문자가 와야 한다.
					[] 안에 기록하면 그 중 하나가 와야 한다.
					* 은 바로 앞에서 지정한 글자가 0개이상 올 수 있다.
					
				==> c로 시작하고 알파벳 소문자만 0개 이상 오면 된다.
				
			2. c[a-z]
				==> c 로 시작하고 다음 글자는 반드시 알파벳 소문자 하나가 와야 한다.
				
			3. c[a-zA-Z]
				==> 첫글자는 c로 시작하고 다음글자는 알파벳이면 된다.
				
			4. c[a-zA-Z0-9]
				==> c로 시작하고 알파벳또는 숫자가 와야 한다.
				
			4-1. [가-힣]
				==> 한글 한글자
				
			5. .*
				==> .은 모든 문자(알파벳과 한글까지 포함)를 의미한다.
				==> * 0개이상을 의미
				==> 따라서 무슨글자가 와도 상관이 없다.
				
			6. c.
				==> c로 시작하고 다음은 모든문자중 한글자가 와야한다.
				
			7. c.*
				==> c로 시작하고 다음은 어떤문자가 0개이상 와도 된다.
				
			8. c\.
				==> \.은 반드시 . 이 와야한다.
				==> 첫글자는 c 다음 문자는 . 이 와야한다. ==> c. 이 와야한다.
				
			9. c\d
				==> \d : 숫자형태의 문자를 의미
				==> 첫글자는 c가 와야하고 다음 문자는 숫자형태의 문자가 와야 한다.
				==> c[0-9] 와 같은 의미
				
			10. c.*t
				==> 첫글자는 c가 와야 하고 그 이후는 문자가 0개 이상 와야하고 
					마지막은 t가 와야한다.
				==> c로 시작하고 t로 끝나는 모든 문자열 의 의미

			11. [b|c].*
				==> [b|c] 둘중 하나가 반드시 와야하고
					==> [bc] 또는 [b-c] 와 같은 의미
				==> b또는 c로 시작하는 모든 문자열
				
			12. [^b|c]
				==> ^ 의 의미는 NOT 의 의미
				==> b 또는 c 가 아닌 모든 문자
			
			13. .*a.*
				==> a가 포함된 모든 문자열
				
			14. .*a.+
				==> * : 0글자 이상을 의미
					+ : 1글자 이상을 의미
				==> 맨 마지막 글자 이전에 a가 반드시 있어야 한다.
				
			15. [b|c].{2}
				==> {2}는 글자수를 의미
				==> 첫글자는 b 또는 c 로시작하고 어떤 문자든 2글자가 와야한다.
				
			16. .{2,3}
				==> {2,3} 은 글자수를 의미하는데
					2글자이상 3글자 이하를 의미한다.
					
예 ]
	휴대폰번호의 정규식 패턴을 만드세요.
	==> 
		01[0-9]-[0-9]{4}-[0-9]{4}
	
				
			























	