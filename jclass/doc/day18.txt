# day18

정규식 검사
==> 주어진 문자열이 특정한 규칙에 맞도록 만들어져 있는지를 확인하는 기능
	예 ]
		주민번호가 6자리-7자리 숫자로 구성되어 있는가?
		아이디가 순수하게 숫자와 문자로만 구성되어 있는가?
		아이디가 최소 몇글자 이상으로 구성되어 있는가?
		
	사용하는 클래스
		java.util.regex.Pattern
		==> 정규식 검사에 사용할 정규식 문법을 지정할 클래스
		
		java.util.regex.Matcher
		==> 정규식 검사를 실제로 실행할 클래스
		
	참고 ]
		정규식 문법
			참고 ]
				[] - 올수있는 문자
					 내부에 a-z 소문자 를 의미
					 A-Z 대문자 하나를 의미
					 0-9 숫자 하나
					 예 ]
					 	[a*^$#]	- a, *, ^, $, # 중 하나가 와야한다는 의미
					 	
				{}	- 문자의 갯수를 지정하는 부분
			
			1. c[a-z]*
				==> 문자를 그냥 기술하면 반드시 그 위치에 해당 문자가 와야 한다.
					[] 안에 기록하면 그 중 하나가 와야 한다.
					* 은 바로 앞에서 지정한 글자가 0개이상 올 수 있다.
					
				==> c로 시작하고 알파벳 소문자만 0개 이상 오면 된다.
				
			2. c[a-z]
				==> c 로 시작하고 다음 글자는 반드시 알파벳 소문자 하나가 와야 한다.
				
			3. c[a-zA-Z]
				==> 첫글자는 c로 시작하고 다음글자는 알파벳이면 된다.
				
			4. c[a-zA-Z0-9]
				==> c로 시작하고 알파벳또는 숫자가 와야 한다.
				
			4-1. [가-힣]
				==> 한글 한글자
				
			5. .*
				==> .은 모든 문자(알파벳과 한글까지 포함)를 의미한다.
				==> * 0개이상을 의미
				==> 따라서 무슨글자가 와도 상관이 없다.
				
			6. c.
				==> c로 시작하고 다음은 모든문자중 한글자가 와야한다.
				
			7. c.*
				==> c로 시작하고 다음은 어떤문자가 0개이상 와도 된다.
				
			8. c\.
				==> \.은 반드시 . 이 와야한다.
				==> 첫글자는 c 다음 문자는 . 이 와야한다. ==> c. 이 와야한다.
				
			9. c\d
				==> \d : 숫자형태의 문자를 의미
				==> 첫글자는 c가 와야하고 다음 문자는 숫자형태의 문자가 와야 한다.
				==> c[0-9] 와 같은 의미
				
			10. c.*t
				==> 첫글자는 c가 와야 하고 그 이후는 문자가 0개 이상 와야하고 
					마지막은 t가 와야한다.
				==> c로 시작하고 t로 끝나는 모든 문자열 의 의미

			11. [b|c].*
				==> [b|c] 둘중 하나가 반드시 와야하고
					==> [bc] 또는 [b-c] 와 같은 의미
				==> b또는 c로 시작하는 모든 문자열
				
			12. [^b|c]
				==> ^ 의 의미는 NOT 의 의미
				==> b 또는 c 가 아닌 모든 문자
			
			13. .*a.*
				==> a가 포함된 모든 문자열
				
			14. .*a.+
				==> * : 0글자 이상을 의미
					+ : 1글자 이상을 의미
				==> 맨 마지막 글자 이전에 a가 반드시 있어야 한다.
				
			15. [b|c].{2}
				==> {2}는 글자수를 의미
				==> 첫글자는 b 또는 c 로시작하고 어떤 문자든 2글자가 와야한다.
				
			16. .{2,3}
				==> {2,3} 은 글자수를 의미하는데
					2글자이상 3글자 이하를 의미한다.
					
예 ]
	휴대폰번호의 정규식 패턴을 만드세요.
	==> 
		01[0-9]-[0-9]{4}-[0-9]{4}
		
---------------------------------------------------------------------------------------------
Scanner
==> 외부장치를 이용해서 데이터를 받아들이기 위한 클래스
	
	참고 ]
		자바는 IO(input/ouput) 라는 개념을 이용해서 외부장치와 연결한다.
		따라서 간단한 테스트를 위해서도 IO 처리를 해야하므로
		개발자 입장에서는 매우 불편하다.
		
	1.5 버젼부터 만들어진 기능
	
	생성자
	==> 외부장치인 File 이나 IO 인 Stream 을 입력해주기를 요구하고 있다.
	
	참고 ]
		System.in 이라는 스트림이 있다.
		==> 이것은 내부적으로 키보드와 연결한 스트림으로 만들어 놓은 것이다.
		
		우리가 
		
		Scanner sc = new Scanner(System.in);
		==> 키보드를 통해서 입력받은 Scanner 가 된 것이다.
	
---------------------------------------------------------------------------------------------
StringTokenizer
==> 하나의 문자열을 원하는 문자를 기준으로 나누어주는 기능을 가진 클래스

	사용이유 ]
		네트워크등을 사용하면
		여러개의 데이터가 한꺼번에 들어올 수 있다.
		
	예 ]
		카톡을 하면
		카톡을 보낸사람, 보낸시간, 내용, .... 이
		하나의 문자로 구성되어서 한꺼번에 들어오게 된다.
		==> 이런 경우에 각각의 데이터를 분리해서 처리해야 한다.
		보낸사람@보낸시간@내용@파일이름
		
	생성방법 ]
		
		1. StringTokenizer(String str)
		==> 문자열을 공백을 중심으로 나누는 기능
		
		2. StringTokenizer(String str, String delim)
		==> 문자열을 지정한 문자열(String delim)을 중심으로 나누는 기능
		
		3. StringTokenizer(String str, String delim, boolean retrunDelims)
		==> 2 + 구분문자도 하나의 문자로 처리
		
	주의사항 ]
		==> 분리된 결과는 임시버퍼에 기억된다.
			따라서 이것은 한번 사용하면 더이상 사용할 수 없게 되고
			반드시 순서대로만 꺼내야 한다.
			
	주요함수 ]
		countTokens()
		==> 나누어진 결과수를 반환해주는 함수
		
		hasMoreElements() / hasMoreTokens()
		==> 아직 임시 버퍼에 내용이 있는지 여부를 묻는 함수
			있으면 true, 없으면 false 를 반환해준다.
		
		nextElement() / nextToken()
		==> 다음데이터 꺼내서 반환해준다.
			Element 는 Object로 반환해주고
			Token 은 문자열로 반환해준다.
			
---------------------------------------------------------------------------------------------
BigDecimal
==> 자바에서 정수로 표현할 수 없는 숫자를 사용하기 위해서 생겨난 클래스
	
	주로 데이터베이스와 연동할 때
	오라클의 경우 데이터 형태는 
		NUMBER(숫자)
	로 데이터를 기억하는데
	이때 기억할 수 있는 오라클의 숫자의 최대 자릿수는 32 자리까지 사용할 수 있다.
	
	문제는 이런 크기의 데이터는 자바에서는 처리할 수 없다.
	
	이런 유형의 데이터를 처리하기 위해서 만들어진 클래스이다.
	
	예 ]
		BigDecimal big = new BigDecimal("12345678901234567890");
		
---------------------------------------------------------------------------------------------

Date 클래스
==> 날짜와 시간을 관리하는 클래스

	생성자 함수
		Date()
		==> 현재 시스템의 날짜와 시간을 이용해서 관리한다.
		
	참고 ]
		이 클래스는 Calendar 클래스가 버젼업 클래스이므로
		자바는 Calendar 클래스의 사용을 권장하고 있다.
		하지만 아직도 Date를 사용해야 하는 함수가 존재한다.
		따라서 알고는 있어야 한다.
		
---------------------------------------------------------------------------------------------
Calendar 클래스
==> Date 클래스를 버젼업 시킨 클래스이다.
	
	생성방법
		
		Calendar cal = new Calendar();
		==> 절대로 아니되옵니다.
			왜??
			이 클래스는 추상클래스이고
			추상함수가 0개 이상 있는 클래스이므로
			미완성인 함수가 존재하는 클래스이므로
			스스로 new  시킬 수 없다.
			따라서 1. 다른클래스에 상속시켜서 그 클래스를 new 시켜서 사용하던지
			2. 속성이 static이고 반환값이 자기자신인 함수를 통해서 객체를 만들어서 사용해야 한다.
			
		Calendar cal = Calendar.getInstance();
		
	주요함수 ]
		
		get(int field)
		==> 필요한 정보를 알려주는 함수
			이 함수는 int field 에 알고자 하는 내용을 알려주면
			그 값에 대해서 알려주는 함수
			
			중요 ]
				Calendar 클래스는 각각의 변수가 무엇을 알기 위한 변수인지를 공부해 놓는것이 좋다.
	
		getTime()
		==> Calendar 클래스를 Date 클래스로 변환해주는 함수
			
			실무에서는 Calendar 클래스를 이용해서 작업을 진행하다가
			필요하면 Date 클래스로 변환해서 사용해야할 필요가 있다.
			
			예 ]
				Calendar cal = Calendar.getInstance();
				....
				Date date = cal.getTime();
				
		참고 ]
			자바 함수(API함수) 이용방법
				자바의 함수를 보면 문자열로 의미하는 내용을
				int 숫자로 입력해 달라는 함수가 많이 존재한다.
				이런 경우는 99%가 자기 자신이 그 문자열의 의미와 숫자를 연결하는 변수(Field)를 가지고 있다.
				따라서 이 변수를 이용해서 처리하라는 의미가 된다.
				
				예 ]
					JFrame fr = new JFrame();
					JPanel pan = new JPanel();
					fr.add(pan, BorderLayout.CENTER);
					
----------------------------------------------------------------------------------------------------------

형식화 클래스
==> 주로 처리된 결과를 보기좋게 출력하기 위한 목적으로 사용되어지는 클래스들...
	==> 결국 데이터를 이쁘게 문자열로 바꾸기 위한 클래스...
	
	1. DecimalFomat
		==> 숫자를 보기 좋게 만들기 위한 클래스
		
		생성 방법
			DecimalFormat(String pattern)
			을 주로 이용한다.
			여기서 pattern은 어떤 모양으로 변환시킬지를 알려주는 패턴을 알려주면 만들어준다.
			
		주요함수
			format(double numer)
			==> 숫자를 원하는 형태의 문자열로 변환시켜주는 함수
			
		참고 ]
			패턴 지정법
				
				0		한자리 숫자를 의미하며 무효숫자도 표시하게 한다.
				#		한자리 숫자를 의미하며 무효숫자는 표시하지 않게 한다.
				.		소수의 위치를 알려준다.
				-		음수일 경우 - 부호의 위치를 알려준다.
				,		3자리마다 , 표시를 하도록 한다.
				E		실수일 경우 지수 형태로 표시하도록 한다.
				:		패턴을 구분한다.
						(양수일 경우와 음수일 경우를 구분해서 처리할 경우 사용)
				%		백분율 표시
				\u00A4	화폐단위를 표시하도록 한다.
				
	2. SimpleDateFormat
		==> 데이터중 날짜데이터를 보기좋게 문자열로 만들기 위한 클래스
			
			API Documentation 참고...
			
	3. ChoiceFormat
		==> switch등을 이용해야 하는 경우에 이것을 간소화 시키기 위한 방법
			특정 번위의 값은 특정 문자열로 교체해서 반환하는 기능을 가진 클래스이다.
			
			생성방법
				ChoiceFormat(double[] limits, String[] fromats)
					
					double[] limits		: 치환될 번위
					String[] formats 	: 치환할 문자
					
	4. MessageFormat
		==> 특정 문자열에 특정 위치의 내용만 변경되는 경우
			문자열 전체를 만들지 않고 
			변경되는 내용만 변화시켜서
			하나의 문자열을 만들어내는 클래스이다.
			
		예 ]
			우리가 오라클에 INSERT 질의명령을 자바로 만드는 경우
			
			"INSERT INTO member VALUES(123, '홍길동', 'MANAGER', ....)"
			"INSERT INTO member VALUES(124, '강길동', 'MANAGER', ....)"
			"INSERT INTO member VALUES(125, '고길동', 'MANAGER', ....)"
			"INSERT INTO member VALUES(126, '길동', 'MANAGER', ....)"
			"INSERT INTO member VALUES(127, '김길동', 'MANAGER', ....)"
			
			이 경우 변경되는 문자열의 부분은 VALUES( ) 사이의 문자열들일 것이다.
			이 경우 매번 처음부터 여러개를 만들어야 하는 불편함이 있다.
			이것을 해결하는 클래스가 MessageFormat 이다.
			
			참고 함수 ]
				parse(String source)
				==> 주어진 문자열 중에서 실제 변화되는 데이터 부분만 알아내는 함수





















	