# day11

객체지향언어(Object Oriented Programming)
==> 간단하게 정의하자면 클래스를 이용해서 프로그램을 만들어 나가는 언어

클래스란?
==> 하나의 목적을 달성하기 위해서 필요한 기능을 모아놓은 프로그램의 기본단위

	예 ]
		문자열을 관리하겠다. 									==> String
		네트워크 작업을 처리해야겠다. 							==> Socket
		많은 양의 데이터를 한꺼번에 보관하고 관리해야겠다.		==> ArrayList
		수학계산에 필요한 것들을 모아놓고 관리하겠다.			==> Math 
	
	***	
	따라서 클래스의 구성요소는
		1. 변수	: 필요한 데이터를 보관하고 있어야 한다.			==> 멤버변수(Field)
		2. 함수	: 뭔가를 해결하기 위한 기능이 있어야 한다.		==> 멤버함수(Method)
		
------------------------------------------------------------------------------------------------------
	클래스 만드는 방법
	
		[접근지정자] [속성]	class	클래스이름 {
			변수;
			...
			함수(){
			}
			...
			
		}
		
		***
		클래스 블럭내에서는 
		일반명령은 올 수 없다.
		
		*****
		중요 ]
			이 클래스는 설계도에 불과하다.
			즉, 클래스만 가지고 있다고 해서 이것이 실행되는 것은 아니다.
			반드시 클래스가 실행 가능한 물건으로 탄생되어야 한다.
			
			이처럼 클래스를 실행 가능한 물건으로 만들어진 것을
			"Object" 다 라고 말한다.
			
			결론적으로
			객체지향 언어는
			클래스를 기반으로 해서 만들어진 Object에 의해서 만들어지는 프로그램이다. 
			
			
		참고 ]
			쉬운 비유로
			오디오를 생각해보자.
			나에게 필요한 오디오 시스템은 필요한 소스기기를 내가 선택을 해서 붙여주기만 하면 된다.
			이처럼 필요한 프로그램이 있으면 그 프로그램을 가져다 사용하면서 프로그램을 만들어나가는
			언어가 객체지향언어이다.
			
			
	객체를 만드는 방법
	==> 객체는 JVM이 만들어준다.
		다만 개발자는 필요한 부품을 만들어 달라고 명령만 내리면 된다.
		
		형식 ]
			클래스이름		변수이름;	// 변수선언
			변수이름 =	new 클래스이름();
			
		예 ]
			Test 라는 클래스가 존재한다면...
			
			Test t;		// 이때 이 변수는 참조형변수(레퍼런스변수)가 된다.
						// 이 변수의 Heap Type은 Test 가 된다.
			t = new Test();	// new 명령을 통해서 클래스가 Object가 되는데...
			
			정리하자면
			
				Test	t 	= 	new Test();
				
				*****
				레퍼런스	+	인스턴스	===> Object(객체)
			
-------------------------------------------------------------------------------------------------------
객체 사용방법
==> 객체를 사용한다는 개념은
	그 목적을 달성하기 위해서 필요한 데이터를 기억하던지?
	그 목적을 달성하기 위해서 필요한 기능(함수, 메소드)를 이용하던지...
	
	사용방법 ]
		
		주소.변수
		주소.함수()
		
	예 ]
		t.num = 100;
		t.calc("12*2");
		
	참고 ]
		자바에서는 소속을 밝혀주는 기호로 오직 "." 만을 사용한다.
		
	참고 ]
		클래스 하나당 오브젝트는 여러개를 만들어도 상관이 없다.
		즉, 설계도는 한장만 있어도 되는데
		설계도 한장으로 만드는 물건은 여러개 만들 수 있다.
		이때 주소를 이용해서 사용하게 되므로
		각각의 오브젝트는 별개로 독립되어서 실행될 수 있다.
		
		
	참고 ]
		
		지역변수
		==> 해당지역(만들어진 블럭)내에서만 사용할 수 있는 변수로
			그 문장이 실행되는 순간 변수가 만들어지고
			그 블럭(해당영역)을 벗어나면 그 변수는 사라지게 된다.
		
		전역변수
		==> 모든 지역에서 사용할 수 있는 변수
			자바에서는 클래스 블럭내에 만들어진 변수를 전역변수라고 한다.
			왜냐하면 클래스 안에서 만들어진 변수는
			new 를 시키는 순간 Heap 영역에 만들어지기 때문에
			Heap 영역의 특성에 따라서 계속 사용할 수 있게되는 것이다.
			
			탄생시점		===> new 시키는 순간
			소멸시점		===> 프로그램이 종료되는 순간
			
			참고 ]
				static 멤버의 경우는 예외....
				
---------------------------------------------------------------------------------------------------------
	*****
	참고 ]
		우리가 만드는 클래스들은 모두 데이터 타입이 될 수 있다.
		따라서 한가지 타입의 여러개의 데이터를 관리하는 배열의 타입으로도 사용할 수 있다.
---------------------------------------------------------------------------------------------------------
객체의 배열
==> 
	배열 역시 객체의 일종이다.
	형식이 
		타입[] 변수 = new 타입[];
	이므로 이차원배열의 경우는
		타입[][] 변수 = new[][];
	의 형식으로 만들어서 사용했었다.
	
	이때 만약 배열에 기억하고 있는 것이 배열이 아니고
	우리가 작성하는 클래스의 인스턴스가 된다고 한다면
	우리가 만드는 클래스를 배열로 관리할 수도 있게 되겠다.
	
	만드는 방법 ]
		
		Nemo[] nemo = new Nemo[3];
		==> 아직 실직적인 오브젝트는 만들지 못했다.
			관리할 공간만 준비해놓은 상태이고
			데이터는 아직 결정이 되지 않은 상태이다.(null 상태)
			
		nemo[0] = new Nemo();	
		nemo[1] = new Nemo();	
		nemo[2] = new Nemo();
		==> 이제서야 배열이 완성이 되었다.
		
	사용방법 ]
		배열변수[위치].변수이름;
		배열변수[위치].함수이름();
		
		
참고 ]
	클래스를 구성하는 변수와 함수는 
	멤버변수, 멤버함수로 부르고 
	영어로 Field, Method 라고 부른다.
	참고로 함수 내부에서 만들어지는 변수는 접근이 원칙적으로 불가능하다.
	<=== 함수블럭을 벗어나면 사라지는 변수이기 때문에....
