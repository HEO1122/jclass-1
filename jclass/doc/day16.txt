# day16

인터페이스(Interface)
==> 클래스의 한 종류이긴 하지만
	약간 그 형태나 의미가 지금까지 배웠던 클래스하고는 다른 
	특수한 클래스의 일종...
	
	1. 최상위 클래스가 Object 가 아니다.
		==> 즉, 인터페이스는 다른 클래스를 상속받아서 만들어진 클래스가 아니다.
		
	2. 인터페이스 내부에는 100% 추상적인 함수가 존재해야 한다.
		==> 절대로 일반 함수는 존재하지 않는다.
			기능을 가진 함수는 절대로 있어서는 안된다.
			
		참고 ]
			추상적인 함수
			==> abstract 속성이 부여되지 않아도 
				자동적으로 몸체가 존재하지 않는 추상함수
				
	3. 인터페이스는 다른 클래스를 상속해줄수 있는데
		이때 다중 상속이 가능하다.
		
	4. 변수는 가질 수 있다.
		이때 이 변수는 묵시적으로
			public static final 
		속성이 붙게 된다.
		
	5. 인터페이스 소속 함수는 묵시적으로 public abstract 함수가 된다.
	
---------------------------------------------------------------------------------------------
만드는 방법 ]
	
	[접근지정자] interface	인터페이스이름 {
		변수; ==> 묵시적으로 public static final 변수가 된다.
		함수();	==> 묵시적으로 public abstract 함수가 된다.(추상함수)
	}
---------------------------------------------------------------------------------------------
왜 인터페이스를 만들었나?
==> 가끔은 JVM 에 의해서 자동 호출되어야 하는 함수가 필요하다.
	
	따라서 함수의 존재는 필요하다.
	
	하지만 가끔은 이 함수가 해야할 일이 개발자의 몫인 경우가 존재한다.
	
	따라서 기능은 개발자의 몫으로 남긴 것이다.

	참고 ]
		자바에서 이벤트를 처리하는 순서
			1. 사용자가 버튼을 클릭하면 이벤트가 발생한다.
				이 이벤트는 운영체제가 인지하게 된다.
				
			2. 운영체제는 자신이 인지한 이벤트가 발생한 프로그램을 구분해서
				그 프로그램을 담당하는 플렛폼(JVM)에게 알려준다.
				
			3. JVM은 통보 받은 이벤트의 정보를 분석하여
				그 정보에 합당한 함수를 호출하여 이벤트를 처리한다.
				==> 그 정보에 합당한 함수를 호출한다는 것에 의미가 있다.
					결국 함수가 존재해야 한다.
				==> 이벤트가 발생하면 무엇을 처리할지는 JVM이 결정하는 것이 아니고
					개발자의 몫이다.
					
인터페이스 사용하기
	1. 
		1) 인터페이스는 스스로 new 되지 못한다.
			(생성자함수를 호출하면서 인스턴스를 생성하지 못한다.)
			이유는 추상클래스와 마찬가지로 
			인터페이스 소속의 함수들은 모두 기능이 없는(몸체가 없는, 미완성인) 함수들로만
			구성되어있기 때문이다.
			
			따라서 추상클래스와 마찬가지로
			일반 클래스에게 상속을 해준다.
			
			상속 방법 ]
				
				class 클래스이름	implements 인터페이스이름{
				}
				
			참고 ]
				일반 클래스를 상속 받는것을 "상속"이라고 표현하고
				인터페이스를 상속 받는 것은 "구현" 이라고 표현한다.
				
		2) 상속받은 클래스에서는 인터페이스 안의 모든 함수를 100% 오버라이드 해야 한다.
			그리고 필요한 기능은 개발자가 구현한다.
			==> 인터페이스 소속 함수는 자동적으로 public abstract 이다.
		3) 일반 클래스를 new 시켜서 사용한다.
			==> 이 방법은 인터페이스 사용의 90%를 차지...
			
			
	2. 약 10% 정도는 
		반환값이 자기자신이면서 속성이 static 인 함수를 만들어서 사용할 수 있다.
		이 때 추상 클래스와 차이점은
		추상 클래스는 그 클래스안에 그런 함수가 존재했지만
		인터페이스의 경우는 다른클래스에 이런 함수들이 존재하는 경우가 있다.
		
참고 ]
	인터페이스는 다중 상속이 가능하다.
	
	형식 ]
		
		class 클래스이름 	implements	인터페이스1, 인터페이스2, ... {
			여기서는 상속받은 인터페이스의 모든 함수를 100% 오버라이드 해야한다.
		}
		
		참고 ]
			만약 추상함수를 오버라이드 하지 않으면
			추상클래스로 만들어야 한다.

**
참고 ]
	일반 상속과 인터페이스 구현을 동시에 사용할 수 있다.
	
	형식 ]
		
		class 클래스이름	extends  상속해줄클래스이름		implements 인터페이스1, 인터페이스2,... {
		}
		
		주의사항]
			이때 반드시 extends 가 먼저 와야하고
			implements가 나중에 와야 한다.
			
-----------------------------------------------------------------------------------------------
참고 ]
	인터페이스도 다른 인터페이스를 상속받아서 만들 수 있다.
	
	형식 ]
		
		interface	인터페이스이름 	extends	상속해줄인터페이스이름{
		}
------------------------------------------------------------------------------------------------









































