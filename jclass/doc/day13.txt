# day13

생성자 함수(Constructor)
==> 클래스를 사용하기 위하여 new 시키는 순간 자동(?) 실행되는 함수

	즉, 클래스를 new 시킨다는 개념은 오브젝트로(실행가능한 물건) 만들어서 실행을 한다는 개념이다.
	따라서 이때 실행한다는 개념은 결국
	오브젝트를 만드는 순간에 뭔가를 실행한다는 개념이 된다.
	이것은 물건을 만들때 뭔가 필요한 조치를 한다는 것이되겠다.
	
	결론적으로 실행가능한 물건을 실제로 만들기 위해 호출되는 함수이다.
	
	참고 ]
		인스턴스를 만드는 명령은
			new
		명령이 하는 것이다.
		
	클래스는 한가지 목적을 달성하기 위해서 만들어지는 프로그램의 기본 단위이다.
	이 안에는 그목적을 달성하기 위한 변수, 함수로 구성이 된다.
	하지만  그 목적을 달성하기 위해서는 
	가장 기본적인 어떤 조치가 필요한 경우가 있을 것이다.
	
	예 ]
		String
			: 문자열을 관리하기위한 목적으로 만들어진 클래스
			==> 문자열을 기억하고 있어야 할 것이다.
			
		FileOutputStream
			: 파일의 내용을 기록하기 위한 목적으로 만들어진 클래스
			==> 파일을 사용할 수 있도록 열어 놓아야 할 것이다.
			
			
	프로그램은 프로그램답게 뭔가를 처리하기 위해서는 함수가 필요하고
	각각의 클래스는 오브젝트로 만들어지는 순간
	그 클래스만의 최소의 일을 할 필요가 있다.
	
	바로 이런 일을 하기 위해 만들어 놓은 함수를 우리른
	"생성자함수(Constructor)" 라고 부른다.
	
	따라서 우리가 생성자 함수를 만드는 이유는
	우리가 만들고자 하는 클래스의 목적에 따라
	그 클래스가 해야 할 가장 기본적인 일을 처리하기 위해 만드는 것이다.
	
생성자 함수 만드는 방법
	
	규칙 ]
		1. 함수의 이름은 반드시 클래스의 이름과 대소문자까지 동일해야 한다.
		2. 반환값은 절대로 가지면 안되고 void라고 써도 안된다.
			(절대로 반환값 타입을 기술하면 안된다.)
		3. 매개변수는 가질 수 있다.
		
		
	예 ]
		class Test {
			Test(){	==> Test 클래스의 기본 생성자 함수
				// 접근지정자는 생략된 경우이다.
				
				참고 ]
					
					함수 작성 형식 ]
						[접근지정자] [속성] 반환값타입 함수이름(매개변수리스트,....) {
							실행내용...
						}	
			}
			
			Test(int a) { // ==> 기본 생성자의 오버로딩..(함수의 중첩)
			
			}
			
			Test(String msg, int a){
			
			}
			
			Test(int a, String msg){
			
			}
			
			void Test(String msg){	// ===> 반환값을 가지고 있으므로 일반함수이다.
			
			}
		}
		
	참고 ]
		==> 생성자 함수는 오버로딩이 가능하다.
			왜???
				필요하면 그 클래스가 기본적으로 해야할 일이
				조금씩 달라질 수 있으므로...
				
			방법 ]
				매개변수의 갯수, 순서, 타입중 하나이상을 달리함으로
				생성자 함수를 여러개 만들어 놓을 수 있다.
				
참고 ]
	여러개의 생성자 함수가 있다는 사실은
	new 시킬때 필요한 생성자 함수를 선택할 수 있어야 한다.
	
	==> 
		우리가 new 시키는 문법을 보면 되는데
		new 시키는 문법은 바로 생성자 함수를 호출하는 문법이다.
		
	예 ]
		class Test {
			Test(){}
			Test(int a){}
		}
		
		new Test();
		==> 이렇게 생성자를 호출하면서 오브젝트를 만드는 문법
		
		new Test(5);
		==> 오브젝트를 만드는 문법...
	
	결론 ]
		매개변수가 있는 생성자 함수를 호출하기 위해서는
		new 시킬때 매개변수에 필요한 데이터를 주면서
		new 시키면 된다.
		
	참고 ]
		기본 생성자(Default Constructor)
		==> 매개변수가 한개도 존재하지 않는 생성자 함수를 
			특별히 부르는 용어
			
		*****
		자바는 생성자 함수가 없어도(생성자함수를 정의하지 않아도) new 시킬 수 있다.
		하지만 이것은 생성자 함수를 이용하지 않는 것이 아니다.
		JVM(자바가상머신, Java Virtual Machine)이 기본 생성자를 내부적으로 만들어 준 후
		이 만들어진 기본생성자를 이용하는 것이다.
		
		결론 ]
			자바는 new 시킬때마다 반드시 생성자 함수를 이용하게 된다.
			
		*****
		만약 개발자가 생성자 함수를 한개라도 만들면
		JVM은 기본 생성자를 만들어주지 않는다.
		즉, 내부적으로 기본생성자를 만드는 경우는
		오직 개발자가 생성자함수를 하나도 정의 하지 않는 경우이다.
		
		***
		==> 따라서 클래스를 만들면 기본생성자를 내용이 없더라도 반드시 작성하세요...
		
		
생성자 함수 이용방법
	
	생성자 함수는 그 클래스를 어떻게 new 시킬지를 알려주는 함수이다.
	즉, 생성자 함수가 요구하는 매개변수가 무엇인지를 보면
	그 클래스를 객체로 생성할 수 있는 방법이 보인다.
	
------------------------------------------------------------------------------------------------------------------
참고 ]
	this()
	==> 생성자 함수는 원칙적으로 개발자가 직접 호출 할 수 없다.
		
		***
		현재 생성자를 실행하는 도중에 다른 생성자를 강제로 호출하는 유일한 방법
	
	***
	규칙 ]
		1. 반드시 생성자 안에서만 사용해야 한다.
			==> 일반함수 내에서는 사용할 수 없다.
		2. 반드시 생성자 함수의 첫 문장으로 사용해야 한다.
			이전에 다른 문장이 있으면 에러가 발생한다.
			
	왜 사용하는가?
	==> 클래스는 한가지 목적을 가진 프로그램의 집합이다.
		물론 기본적인 작업이 조금은 달라질 수 있지만
		그 틀 자체는 변하지 않을 것이다.
		
		예 ]
			Socket 은 접속할 대상의 주소와 포트번호는 바뀌겠지만
			결론적으로 접속은 시도해야 할 것이다.
			
			String 은 데이터의 형태가 달라지겠지만
			결론적으로 문자열을 만들어야 한다.
			
	따라서 생성자 함수가 하는 기능은 거의 비슷할 것이다.
	기능이 비슷하다는 의미는 코드의 내용도 거의 동일하다는 것이고
	이때 생성자 함수가 여러개이면
	같은 코딩내용이 중복되어서 작성이 되어야 할 것이다.
	
	이 작업을 조금이라도 단순화 시켜주기 위해서
	생성자 끼리는 서로 필요하면 상대방을 이용할 수 있게 
	만들어 놓은 문법이다.
	
------------------------------------------------------------------------------------------------------
향상된 for 명령(forEach 반복문)
==> 자바 버젼 1.4 부터 생겨난 명령

	형식 ]
		for(데이터타입	변수이름 : 배열데이터){
			처리내용...
		}
	의미 ]
		배열데이터의 데이터를 하나씩 꺼내서 변수에 채우고 처리내용을 처리한다.
		이작업이 배열데이터를 모두 꺼낼때까지 순차적으로 진행한다.
		
	참고 ]
		변수는 주어진 데이터의 변수와 동일해야 한다.
		배열데이터는 반드시 배열이거나 커렉션이어야 한다.

	예 ]
		int[] num = {1, 2, 3, 4, 5};
		
		for(int tmp : num){
			==>
				tmp의 데이터 타입은 num 배열의 데이터가 int 타입이므로 int 가 된 것이다.
				
				맨 처음 tmp에   1을 꺼내서 기억시키고 한 번 반복하고
								2를 꺼내서 기억시키고 한 번 반복하고
								3을 꺼내서 기억시키고 ....
								
								5를 꺼내서 기억시키고 반복하고
		}
		
--------------------------------------------------------------------------------------------------------

this
==> 교과서적인 의미로
	현재 실행중인 인스턴스의 주소를 기억하는 약속된 변수이다.
	
	이것은 JVM이 클래스를 처리하기 위해서 JVM이 사용하는 변수이다.
	따라서 개발자는 잘 사용하지는 않는다.
	
	규칙 ]
		
		1. 모든 멤버는 사용할 때 반드시 앞에 주소가 있어야 한다.
			멤버는 클래스 안에 만들어진 변수나 함수를 부르는 말이다.
			
			따라서 new 를 시킨 후 그 주소를 기억해 놓았다가
			그 주소를 이용해서 사용하는 것이다.
			
		2. 만약 주소가 없으면 JVM이 자동으로 this를 붙여준다.
		3. 멤버 함수를 호출할 때는 무조건 주소값을 함수한테 알려주도록 약속했고
			함수는 this 변수를 준비한 후
			함수를 호출할 때 알려준 주소를 기억하게 된다.
			
	참고 ]
		딱 한번 this를 개발자가 사용해야 하는 경우가 있다.
		
		가끔은 지역변수와 멤버변수의 이름이 같은 경우가 발생할 수 있다.
		이때 그 함수는 지역변수를 우선적으로 사용하게 된다.
		따라서 멤버 변수는 데이터가 기억되지 않게 된다.
		***
		이때 
		굳이 이 변수가 멤버변수임을 꼭 밝히고 싶은 경우가 생기면...
		이때 강제로 this라고 써주면 된다.
		
-------------------------------------------------------------------------------------------------------
static 속성
==> static 영역에 생겨지는 함수나 변수를 이야기 한다.

	참고 ]
		클래스, 함수, 변수를 만들때 속성을 지정할 수 있다.
		
		예 ]
			[접근지정자] 	[속성]  class 클래스이름 {}
		예 ]
			[접근지정자]	[속성]	반환값타입	함수이름(매개변수리스트){}
		예 ]
			[접근지정자]	[속성]	데이터타입	변수이름;


	static 영역의 특징
		1. 프로그램이 실행되기 위해서 JVM이 로딩하는 순간 저절로 생기는 영역이다.
			즉, 사용자가 특별히 만들어 달라고 요구하지 않아도 자동적으로 생기는 영역이다.
		
		***
		2. 이 영역에 생기는 변수나 함수는 두번다시 생기지 않는다.
		
	
static 변수
	==> static 영역에 만들어지는 변수
		
		형식 ]
			
			[접근지정자]	static	데이터타입	변수이름;
			
			
		특징 ]
			1. 여러 오브젝트가 공동으로 사용하는 변수가 된다.
				왜?
				오브젝트를 100개를 만들어도 static 변수는 오직 한개이므로...
				즉, 한 오브젝트가 데이터를 바꾸면
				다른 오브젝트에서도 바뀐 데이터를 사용해야 한다.
				
				따라서 static 변수는 오브젝트(주소)의 의미가 없다.
				더군다나 오브젝트가 없어도 사용할 수 있다.
				
			2. new 시키지 않아도 사용할 수 있는 변수이다.
			
				사용법 ]
					클래스이름.변수이름;
					
static 함수
==> 역시 변수와 마찬가지로 static 영역에 생기는 함수
	따라서 오브젝트가 없어도 사용할 수 있다.
	
	사용법 ]
		클래스이름.함수이름();
		
	+
	특징 ]
	==> 	this를 사용할 수 없는 함수
	
	***
	결론적으로 
		static 함수 안에서는 static 멤버만 사용할 수 있다.
		일반 함수 안에서는 일반 멤버와 static 멤버도 사용할 수 있다.
			
			
			
			
			
			
			
			
			
			
			
			
			




















	
	
	
	
	
	
	
	
	
	
	