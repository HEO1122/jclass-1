논리 연산자
==> 두 논리값 사이의 관계를 따지는 연산자.
	==> 논리값을 AND, OR, NOT 방식으로 관계를 알아보는 연산자
	
	논리연산자의 연산 결과는 논리값이 나온다.
	
	주의사항 ]
		데이터는 반드시 논리값이어야 한다.
		
	기호 ]
		!	-	NOT
		|	- 	OR	(또는 의 의미)
		||	- 	OR(또는 의 의미 : 절삭연산)
		&	- 	AND (그리고 의 의미)
		&&	- 	AND(그리고 의 의미 : 절삭연산)
		
	진가표 ]
		
		데이터1 	데이터2			OR(|, ||)	AND(&, &&)
		true	true				true		true
		true	false				true		false
		false	true				true		false	
		false	false				false		false
		
	참고 ]
		컴퓨터는 한번의 질문에 오직 한개만 대답할 수 있다.
		즉, 크면 큰거고, 작으면 작은거다.
		
		수학식에서
			10 < x < 20
		와 같은 표현식은 가능했지만
		컴퓨터의 연산식에서는 이렇게 하면 안된다.
		
		따라서 이경우 연산식은
			x > 10 & x < 20
		
	참고 ]
		
		수학 계산식에서 곱하기 기호는 생략할 수 있어지만
		자바(모든 프로그램 언어의) 연산식에서 곱하기 기호는 생략하면 안된다.
		
		예 ]
			y = 2x	==> 수학에서는 가능하지만 프로그램언어에서는 불가능하다.
			==> y = 2 * x;
			
	참고 ]
		절삭 연산
		==> 특정부분의 계산식은 계산하지 않도록 한다.
		
--------------------------------------------------------------

쉬프트 연산자
==> 데이터 비트를 지정한 방향으로 지정한 횟수만큼 이동시키는 연산자
	
	***
	중앙처리장치를 거치지 않는 연산을 한다.
	메모리상에서 연산이 이루어지는 연산자.
	
	사용기호 ]
		>>	: / 2 ^ n
		<<	: * 2 ^ n
		
---------------------------------------------------------------
조건연산자(3항연산자)
==> 하나의 명령에 가까운 형식
	조건에 따라서 처리할 내용을 구분해서 처리하도록 하는 연산자.
	
	형식 ]
		(조건식) ? 처리내용1 : 처리내용2;
		
	의미 ]
		조건식이 true이면 처리내용1을 반환하고
			  false이면 처리내용2를 반환한다.
			  
	if 명령을 단순화 시킨 의미를 가진 명령이다.
	
	참고 ]
		모든 연산자가 중첩 처리될 수 있듯이
		조건 연산자도 중첩 처리될 수 있다.
		
		예 ]
			(조건식1) ? (조건식2 ? (a) : (b)) : (조건식3 ? (c) : (d));
			
			의미 ]
				조건식1이 참이면 조건식2가 참일 경우 a 를 반환하고
									거짓일 경우 b를 반환
						거짓이면 조건식3가 참인경우 c를 반환하고
									  거짓인 경우 d를 반환한다.
									  
			반환값이 있으므로 일반적으로 왼쪽에 변수를 만들어서
			변수에 반환값을 담아서 처리하는 경우가 많다.
			
----------------------------------------------------------------

	0 <= Math.random() < 1			<--- x 10
	
	(int) 0 * 10 <= (int)(Math.random() * 10) < (int)(1 * 10)
	
	0 <= (int)(Math.random() * 10) < 10
	==>
	0 <= (int)(Math.random() * 10) <= 9
	
	0 <= Math.random() <= 0.99999999999999999999999999999999999999
	
	
	작은수 ~ 큰수 사이의 랜덤한 숫자를 만드는 형식
	
	(int)(Math.random() * (큰수 - 작은수 + 1) + 작은수)
	
-------------------------------------------------------------------
제어 명령
	컴퓨터는 원칙적으로 코딩한 순서대로 실행하는 것을 원칙으로 한다.
	하지만 프로그램을 제작하다 보면 이 순서가 바껴서 실행되어야 되는 경우도 있다.
	이럴 때 사용하는 명령이 
		제어명령
	이다.
	
	1. 조건 제어 명령
		==> 특정 조건에 따라서 실행 순서를 변경하는 명령
		
		1) if 명령
			==> 조건식이 true 인 경우만 처리해주는 명령
			
			형식 ]
				if(조건식) {
					처리내용
				}
				
			의미 ]
				조건식이 true 인 경우 처리내용을 처리하세요.
				
			실행 순서 ]
				
				a
				if(조건식 - b) {
					처리내용 - c
				}
				- d
				
				조건식이 true 인 경우
				==> a -> b -> c -> d
				
				조건식이 false 인 경우
				==> a -> b -> d
				
		2) if ~ else 명령
			==> 조건식이 true 인 경우와 false 인 경우 두가지 모두를 처리해주는
				조건명령
				
			형식 ]
				if(조건식) {
					처리내용1
				} else {
					처리내용2
				}
				
			의미 ]
				조건식이 true 이면 처리내용1을 처리하고 
					  false이면 처리내용2를 처리하세요.
					  
			실행순서 ]
				
				a
				if(조건식 - b) {
					처리내용1 - c
				} else {
					처리내용2 - d
				}
				
				- e
				
				조건식이 true 인 경우
				==> a -> b -> c -> e
				
				조건식이 false 인 경우
				==> a -> b -> d -> e
			
		3) if ~ else if ~ else 명령
			==> 여러개의 조건처리가 가능한 조건 명령
			
			형식 ]
				if(조건식1) {
					처리내용1
				} else if(조건식2) {
					처리내용2
				} else if(조건식3) {
					처리내용3
				} ...
				
				} else {
					처리내용n
				}
				
			의미 ]
				조건식1이 true 이면 처리내용1을 처리하고
				조건식2가 true 이면 처리내용2를 처리하고
				조건식3이 true 이면 처리내용3을 처리하고
				....
				위의 조건에 해당하지 않는 경우는 처리내용n 을 처리하세요.
				
			참고 ]
				조건식2부터는 위의 조건식이 false 라는 확실한 전제하에서 읽혀진다.
		4) switch case 명령
			==> 다중 조건 처리 명령에 해당하며
				여러개의 질문을 차례로 처리할 수 있는 명령
				
				주의 ]
					묵시적으로 동등비교연산으로 처리가 된다.
					
			형식 ]
				switch(비교내용 또는 변수) {
				case 데이터1:
					처리내용1;
					break;
				case 데이터2:
					처리내용2;
					break;
				....
				default:
					처리내용n;
				}
				
				참고 ]
					break; 명령은 case 구문 끝에 반드시 기술되어야 한다.
					
					참고 ]
						break;
						==> 반복문, switch ~ case 구문에서 사용하는 명령으로
							해당 명령의 block({})을 벗어나도록 하는 명령
							(해당 명령을 즉시 중지하도록 하는 명령)
		
-------------------------------------------------------------------

문제 7 ]
	
	숫자 3개를 임의로 발생할 후
	가장 큰 숫자만 선택해서 출려하는 프로그램을 작성하세요.
	단, 3항연산를 사용해서 처리하세요.
	(옵션 - 조건문으로 처리)
	
문제 8 ]
	알파벳 문자 하나를 입력한 후
	그 문자가 대문자이면 소문자로
	소문자이면 대문자로 변환시켜서 
	출력해주는 프로그램을 작성하세요.
	
문제 9 ]
	게시물을 게시판에 출력하는데
	하나의 게시판 페이지에는 게시물을 15개를 출력할 수 있다.
	게시물의 갯수를 랜덤하게 발생시킨후
	몇개의 페이지가 필요한지 계산해서 출력해주는 
	프로그램을 작성하세요.
	
문제 10 ]
	1000 ~ 3000 년 사이의 년도를 랜덤하게 발생시켜서
	해당 년도가 윤년인지 평년인지를 구분해서 출력해주는 프로그램을 작성하세요.
	
	참고 ]
		윤년은 4로 나누어 떨어지는 해는 윤년
		100으로 나누어 떨어지면 평면
		100으로 나눠 떨어지는 해중 400으로 나눠 떨어지는 해는 윤년이라 한다.
		
문제 11 ]
	3자리 숫자를 입력받아서
	이 숫자에서 가장 가까운 100의 배수를 만들기 위해서는
	얼마가 필요한지를 계산해서 출력해주는 프로그램을 작성하세요.
	
	예 ]
		241		- 200이 가까우므로 41 빼야 한다.
	


	